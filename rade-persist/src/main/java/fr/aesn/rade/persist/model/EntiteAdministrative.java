/*  This file is part of the Rade project (https://github.com/mgimpel/rade).
 *  Copyright (C) 2018 Marc Gimpel
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
/* $Id$ */
package fr.aesn.rade.persist.model;

import java.io.Serializable;
import java.util.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Size;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * Entity: Entité Administrative.
 * <pre>
 * CREATE TABLE ZR_ENTITEADMIN (
 *   ID                integer       NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 *   DEBUT_VALIDITE    date          NOT NULL,
 *   FIN_VALIDITE      date,
 *   ARTICLE_ENRICHI   varchar(5),
 *   NOM_MAJUSCULE     varchar(70)   NOT NULL,
 *   NOM_ENRICHI       varchar(70)   NOT NULL,
 *   COMMENTAIRE       varchar(4000) NOT NULL,
 *   TYPE_NOM_CLAIR    varchar(1),
 *   TYPE_ENTITE_ADMIN varchar(3)    NOT NULL,
 *   AUDIT_ID          integer       NOT NULL,
 *   FOREIGN KEY(TYPE_NOM_CLAIR)    REFERENCES ZR_TYPENOMCLAIR,
 *   FOREIGN KEY(TYPE_ENTITE_ADMIN) REFERENCES ZR_TYPEENTITEADMIN,
 *   FOREIGN KEY(AUDIT_ID)          REFERENCES ZR_AUDIT
 * );
 * </pre>
 * @author Marc Gimpel (mgimpel@gmail.com)
 */
@Entity
@Table(name = "ZR_ENTITEADMIN")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter @Setter @NoArgsConstructor
@ToString(exclude = {"typeEntiteAdmin", "parents", "enfants"})
@EqualsAndHashCode
public class EntiteAdministrative implements Serializable {
  /** Unique Identifier for Serializable Class. */
  private static final long serialVersionUID = 3168273278242785797L;

  /** Identifiant de l'Entité Administrative. */
  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "id_Sequence_EntiteAdmin")
  @SequenceGenerator(name = "id_Sequence_EntiteAdmin", sequenceName = "entiteadmin_seq")
  @Column(name = "ID", nullable = false)
  private Integer id;

  /** Date de début de Validité de l'entité. */
  @Temporal(TemporalType.DATE)
  @Column(name = "DEBUT_VALIDITE", nullable = false)
  private Date debutValidite;

  /** Date de fin de Validité de l'entité. */
  @Temporal(TemporalType.DATE)
  @Column(name = "FIN_VALIDITE", nullable = true)
  private Date finValidite;

  /** Article (enrichie) de l'entité. */
  @Size(max = 5)
  @Column(name = "ARTICLE_ENRICHI", length = 5, nullable = true)
  private String articleEnrichi;

  /** Nom (en majuscule) de l'entité. */
  @Size(max = 70)
  @Column(name = "NOM_MAJUSCULE", length = 70, nullable = false)
  private String nomMajuscule;

  /** Nom (enrichie) de l'entité. */
  @Size(max = 70)
  @Column(name = "NOM_ENRICHI", length = 70, nullable = false)
  private String nomEnrichi;

  /** Commentaire. */
  @Size(max = 4000)
  @Column(name = "COMMENTAIRE", length = 4000, nullable = false)
  private String commentaire;

  /** Type de Nom Clair (TNCC) de l'entité. */
  @Size(max = 1)
  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "TYPE_NOM_CLAIR", nullable = true)
  private TypeNomClair typeNomClair;

  /** Type d'Entité Administrative (Région, Département, ...). */
  @Size(max = 3)
  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "TYPE_ENTITE_ADMIN", nullable = false)
  private TypeEntiteAdmin typeEntiteAdmin;

  /** Détails de Modification de l'entité. */
  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "AUDIT_ID", nullable = false)
  private Audit audit;

  /**
   * NB: Il n'est pas possible de créer un lien @ManyToMany car la classe de
   * liaison GenealogieEntiteAdmin contient plus que simplement les liens
   * parents et enfants, mais aussi des données caracteriasant ce lien
   * (type de généalogie et commentaire sur la généalogie).
   */
  @OneToMany(mappedBy = "parentEnfant.enfant")
  private Set<GenealogieEntiteAdmin> parents;

  /**
   * NB: Il n'est pas possible de créer un lien @ManyToMany car la classe de
   * liaison GenealogieEntiteAdmin contient plus que simplement les liens
   * parents et enfants, mais aussi des données caracteriasant ce lien
   * (type de généalogie et commentaire sur la généalogie).
   */
  @OneToMany(mappedBy = "parentEnfant.parent")
  private Set<GenealogieEntiteAdmin> enfants;
}
